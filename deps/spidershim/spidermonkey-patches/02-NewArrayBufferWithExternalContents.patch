diff --git a/js/src/jsapi.h b/js/src/jsapi.h
index 5ae71a7..91ad900 100644
--- a/js/src/jsapi.h
+++ b/js/src/jsapi.h
@@ -3500,6 +3500,13 @@ extern JS_PUBLIC_API(JSObject*)
 JS_NewArrayBufferWithContents(JSContext* cx, size_t nbytes, void* contents);
 
 /**
+ * Create a new array buffer with the given contents.  The array buffer does not take ownership of
+ * contents, and JS_DetachArrayBuffer must be called befor the contents are disposed of.
+ */
+extern JS_PUBLIC_API(JSObject*)
+JS_NewArrayBufferWithExternalContents(JSContext* cx, size_t nbytes, void* contents);
+
+/**
  * Steal the contents of the given array buffer. The array buffer has its
  * length set to 0 and its contents array cleared. The caller takes ownership
  * of the return value and must free it or transfer ownership via
diff --git a/js/src/vm/ArrayBufferObject.cpp b/js/src/vm/ArrayBufferObject.cpp
index a8f4604..4623afc 100644
--- a/js/src/vm/ArrayBufferObject.cpp
+++ b/js/src/vm/ArrayBufferObject.cpp
@@ -1228,6 +1228,16 @@ JS_NewArrayBufferWithContents(JSContext* cx, size_t nbytes, void* data)
                                      /* proto = */ nullptr, TenuredObject);
 }
 
+JS_PUBLIC_API(JSObject*)
+JS_NewArrayBufferWithExternalContents(JSContext* cx, size_t nbytes, void* data)
+{
+    MOZ_ASSERT_IF(!data, nbytes == 0);
+    ArrayBufferObject::BufferContents contents =
+        ArrayBufferObject::BufferContents::create<ArrayBufferObject::PLAIN>(data);
+    return ArrayBufferObject::create(cx, nbytes, contents, ArrayBufferObject::DoesntOwnData,
+                                     /* proto = */ nullptr, TenuredObject);
+}
+
 JS_FRIEND_API(bool)
 JS_IsArrayBufferObject(JSObject* obj)
 {
